{"version":3,"file":"server.js","sourceRoot":"","sources":["../../src/server/server.ts"],"names":[],"mappings":"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","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport multer from 'multer';\n\nimport path from 'path';\n\nconst app: express.Express = express();\n\n//CORSの許可\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-origin', '*');\n  res.header(\n    'Access-Control-Allow-Headers',\n    'Origin, X-Requested-With, Content-Type, Accept',\n  );\n  next();\n});\n\nlet clientPath = __dirname.replace('/server', '');\napp.use('/', express.static(clientPath));\n\n//app.get('/*', function(req, res) {\n//  res.sendFile(path.join(clientPath, 'index.html'));\n//  //  res.sendFile('dist/index.html');\n//});\n\n//body-parserに基づいた着信リクエストの解析\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: true}));\n\n\n//GetとPostのルーティング\nconst router: express.Router = express.Router();\nrouter.get('/api/getTest', (req: express.Request, res: express.Response) => {\n  res.send(req.query);\n});\n\n// POST\nrouter.post('/api/post', (req: express.Request, res: express.Response) => {\n  //body\n  console.log(req.body);\n\n  console.log(req.body.hoge);\n\n\n  res.send('Received POST Data!');\n});\n\n// GET\nrouter.get(\n  '/api/test/',\n  async (req: express.Request, res: express.Response) => {\n    try {\n\n      console.log('---------- req start ----------');\n\n      //baseUrl\n      console.dir('baseUrl:' + req.baseUrl);\n      //body\n      console.dir('body:' + req.body);\n      //method\n      console.dir('method:' + req.method);\n      //params\n      console.dir('prams:' + req.params);\n      //protocol\n      console.dir('protocol:' + req.protocol);\n\n      //GETパラメータ\n      console.dir('[param]hoge :' + req.query.hoge);\n\n      console.log('---------- req end   ----------');\n\n      res.send(\n        new (class {\n          test: string = 'test';\n        })(),\n      );\n    } catch (e) {\n      throw e;\n    } finally {\n      //\n    }\n  },\n);\n\n//router.get('*', function(req, res) {\n//  res.sendFile(path.join(clientPath, 'index.html'));\n//});\n\n// multer middleware\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.originalname);    //オリジナルのファイルと同一名\n  }\n});\n\n//const upload = multer({ dest: 'uploads/' })   //アップロードファイルの保存先\nconst upload = multer({ storage: storage });   //アップロードファイルの保存先\n\nrouter.post('/foo', upload.array('files', 3), (req, res) => {    //input要素の名前と最大アップロード数\n  console.log('--- post() /foo called ---')\n  console.log('--- req.body --')\n  console.log(req.body)\n  console.log('--- req.files ---')\n  console.log(req.files)\n  res.send('Done')\n});\n\napp.use(router);\n\n//3000番ポートでAPIサーバ起動\napp.listen(3000, () => {\n  console.log('Example app listening on port 3000!');\n});\n"]}